// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: internal/adapters/driven/grpc/proto/svc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PostParserClient is the client API for PostParser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostParserClient interface {
	SinglePart(ctx context.Context, in *TextFieldReq, opts ...grpc.CallOption) (*TextFieldRes, error)
	MultiPart(ctx context.Context, opts ...grpc.CallOption) (PostParser_MultiPartClient, error)
}

type postParserClient struct {
	cc grpc.ClientConnInterface
}

func NewPostParserClient(cc grpc.ClientConnInterface) PostParserClient {
	return &postParserClient{cc}
}

func (c *postParserClient) SinglePart(ctx context.Context, in *TextFieldReq, opts ...grpc.CallOption) (*TextFieldRes, error) {
	out := new(TextFieldRes)
	err := c.cc.Invoke(ctx, "/rpc.PostParser/singlePart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postParserClient) MultiPart(ctx context.Context, opts ...grpc.CallOption) (PostParser_MultiPartClient, error) {
	stream, err := c.cc.NewStream(ctx, &PostParser_ServiceDesc.Streams[0], "/rpc.PostParser/multiPart", opts...)
	if err != nil {
		return nil, err
	}
	x := &postParserMultiPartClient{stream}
	return x, nil
}

type PostParser_MultiPartClient interface {
	Send(*FileUploadReq) error
	CloseAndRecv() (*FileUploadRes, error)
	grpc.ClientStream
}

type postParserMultiPartClient struct {
	grpc.ClientStream
}

func (x *postParserMultiPartClient) Send(m *FileUploadReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *postParserMultiPartClient) CloseAndRecv() (*FileUploadRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FileUploadRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PostParserServer is the server API for PostParser service.
// All implementations must embed UnimplementedPostParserServer
// for forward compatibility
type PostParserServer interface {
	SinglePart(context.Context, *TextFieldReq) (*TextFieldRes, error)
	MultiPart(PostParser_MultiPartServer) error
	mustEmbedUnimplementedPostParserServer()
}

// UnimplementedPostParserServer must be embedded to have forward compatible implementations.
type UnimplementedPostParserServer struct {
}

func (UnimplementedPostParserServer) SinglePart(context.Context, *TextFieldReq) (*TextFieldRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SinglePart not implemented")
}
func (UnimplementedPostParserServer) MultiPart(PostParser_MultiPartServer) error {
	return status.Errorf(codes.Unimplemented, "method MultiPart not implemented")
}
func (UnimplementedPostParserServer) mustEmbedUnimplementedPostParserServer() {}

// UnsafePostParserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostParserServer will
// result in compilation errors.
type UnsafePostParserServer interface {
	mustEmbedUnimplementedPostParserServer()
}

func RegisterPostParserServer(s grpc.ServiceRegistrar, srv PostParserServer) {
	s.RegisterService(&PostParser_ServiceDesc, srv)
}

func _PostParser_SinglePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextFieldReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostParserServer).SinglePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.PostParser/singlePart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostParserServer).SinglePart(ctx, req.(*TextFieldReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostParser_MultiPart_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PostParserServer).MultiPart(&postParserMultiPartServer{stream})
}

type PostParser_MultiPartServer interface {
	SendAndClose(*FileUploadRes) error
	Recv() (*FileUploadReq, error)
	grpc.ServerStream
}

type postParserMultiPartServer struct {
	grpc.ServerStream
}

func (x *postParserMultiPartServer) SendAndClose(m *FileUploadRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *postParserMultiPartServer) Recv() (*FileUploadReq, error) {
	m := new(FileUploadReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PostParser_ServiceDesc is the grpc.ServiceDesc for PostParser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostParser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.PostParser",
	HandlerType: (*PostParserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "singlePart",
			Handler:    _PostParser_SinglePart_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "multiPart",
			Handler:       _PostParser_MultiPart_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "internal/adapters/driven/grpc/proto/svc.proto",
}
